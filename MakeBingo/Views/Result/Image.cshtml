@model Result
@{
    Layout = null;
}
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=750" />
    <title>빙고 만들기</title>

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.1.3/css/bootstrap.min.css"
          crossorigin="anonymous"
          integrity="sha256-eSi1q2PG6J7g7ib17yAaWMcrr5GrtohYChqibrV7PBE=" />
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.7.1/css/all.css" integrity="sha384-fnmOCqbTlWIlj8LyTjo7mOUStjsKC4pOpQbqyi7RrhN7udi9RwhKkMHpvLbHG9Sr" crossorigin="anonymous">
    <link rel="stylesheet" href="~/css/site.css" />
</head>
<body style="min-width: 1000px;">
    <div id="bingo" class="p-3" style="width: 1000px;">
        <h2 class="text-center mt-2">
            @Model.Board.Title
        </h2>
        <div style="max-width: 720px;" class="mx-auto">
            <p class="text-right mb-0">
                @if (!String.IsNullOrWhiteSpace(Model.Board.Maker))
                {
                    if (!String.IsNullOrWhiteSpace(Model.Board.Link))
                    {
                        <text>만든이 : @Model.Board.Maker</text>
                    }
                    else
                    {
                        <text>만든이 : @Model.Board.Maker</text>
                    }
                }
            </p>
            <p class="text-right">
                @if (Model.Board.Parent != null)
                {
                    <text>원본 : <a href="@Url.Action("Detail", "Board", new {id = Model.Board.ParentId})">@Model.Board.Parent.Title - @Model.Board.Parent.Maker</a></text>
                }
            </p>
        </div>
        <div class="square-wrap mt-3">
            <div class="content">
                <div class="bingo-board">
                    @foreach (var row in Model.Cells)
                    {
                        <div class="bingo-row">
                            @foreach (var cell in row)
                            {
                                <div class="bingo-cell">
                                    @if (cell.Checked)
                                    {
                                        <div class="bingo-overlay crayon@(cell.Pattern)"></div>
                                    }
                                    @cell.Label
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
    <script src="https://unpkg.com/promise-polyfill"></script>
    <script src="https://unpkg.com/whatwg-fetch"></script>
    <script src="https://unpkg.com/vue"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"
            crossorigin="anonymous"
            integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=">
    </script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.1.3/js/bootstrap.bundle.min.js"
            crossorigin="anonymous"
            integrity="sha256-E/V4cWE4qvAeO5MOhjtGtqDzPndRO1LBk8lJ/PR7CA4=">
    </script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    <script src="https://html2canvas.hertzen.com/dist/html2canvas.min.js"></script>
    <script>
        function dataURItoBlob(dataURI) {
            // convert base64/URLEncoded data component to raw binary data held in a string
            var byteString;
            if (dataURI.split(',')[0].indexOf('base64') >= 0)
                byteString = atob(dataURI.split(',')[1]);
            else
                byteString = unescape(dataURI.split(',')[1]);
            // 마임타입 추출
            var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];
            // write the bytes of the string to a typed array
            var ia = new Uint8Array(byteString.length);
            for (var i = 0; i < byteString.length; i++) {
                ia[i] = byteString.charCodeAt(i);
            }
            return new Blob([ia], {type:mimeString});
        }

        var bingo = document.querySelector('#bingo');
        html2canvas(bingo)
            .then(canvas => {
                bingo.remove();

                var form = new FormData();
                form.append("image", dataURItoBlob(canvas.toDataURL('image/png')), 'file.png');

                fetch('/api/results/@(Model.Id)/uploadImage',
                        {
                            method: 'POST',
                            body: form
                        })
                    .then(function(res) {})
                    .then(function (data) {
                        location.href = '@Url.Action("Detail", new {Model.Id})';
                    });
            });
    </script>
</body>
</html>
